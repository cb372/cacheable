package scalacache

import scala.concurrent.duration.Duration
import scala.language.higherKinds

trait Cache[V] extends CacheAlg[V] {

  def config: CacheConfig

  def stats: CacheStats

  // Optimised methods for use by memoize: we know the key will be a single string so we can avoid some work.
  // These are public because calls to them are generated by the memoize macro.

  def cachingForMemoize[F[_]](baseKey: String)(ttl: Option[Duration])(f: => V)(implicit mode: Mode[F],
                                                                               flags: Flags): F[V]

  def cachingForMemoizeF[F[_]](baseKey: String)(ttl: Option[Duration])(f: => F[V])(implicit mode: Mode[F],
                                                                                   flags: Flags): F[V]

}
