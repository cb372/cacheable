package scalacache

import scalacache.serialization.Codec

import scala.concurrent.duration.Duration
import scala.language.higherKinds

abstract class Cache[F[_]: Mode] extends CacheAlg[F] {

  def config: CacheConfig

  // Optimised methods for use by memoize: we know the key will be a single string so we can avoid some work.
  // These are public because calls to them are generated by the memoize macro.

  def cachingForMemoize[V](baseKey: String)(ttl: Option[Duration])(f: => V)(implicit codec: Codec[V],
                                                                            flags: Flags): F[V]

  def cachingForMemoizeF[V](baseKey: String)(ttl: Option[Duration])(f: => F[V])(implicit codec: Codec[V],
                                                                                flags: Flags): F[V]

}
