aerospike {

  # Port which is applied as default to each host that no have a explicitly port.
  port = 3000

  # List of nodes in cluster, expresed like:
  # "host-name", "host-name:port", "ip-address", "ip-address:port"
  hosts = ["localhost"]

  client-policy {

    # The timeout (in milliseconds) when opening a connection to
    # the server host for the first time.
    # Zero indicates the client should not timeout.
    timeout = 0

    # Throw exception if host connection fails
    fail-if-not-connected = true

    # Maximum number of concurrent asynchronous commands that are active at any point in time.
    # Concurrent commands can be used to estimate concurrent connections.
    # The number of concurrent open connections is limited by:
    # max open connections = asyncMaxCommands * <number of nodes in cluster>
    # The actual number of open connections consumed depends on how balanced the commands are
    # between nodes and if asyncMaxConnAction is ACCEPT.
    # The maximum open connections should not exceed the total socket file descriptors available
    # on the client machine.  The socket file descriptors available can be determined by the
    # following command:  ulimit -n
    async-max-commands = 200

    # How to handle cases when the asynchronous maximum number of concurrent connections
    # have been reached.
    #
    # ACCEPT : Accept and process command. This implies the user is reponsible for
    #          throttling asynchronous load.
    #
    # REJECT : Reject database command.
    #
    # BLOCK  : Block until a previous command completes.
    async-max-command-action = "REJECT"

    # Maximum socket idle in seconds
    # Socket connection pools will discard sockets that have been idle longer than
    # the maximum.
    max-socket-idle = 14

    # Maximum milliseconds to wait for an asynchronous network selector event.
    # Zero indicates the selector should not timeout.
    async-selector-timeout = 0

    # Number of selector threads used to process asynchronous network events.
    # The default is a single threaded network handler.
    # Some applications may benefit from increasing this value to the number of CPU
    # cores on the executing machine.
    async-selector-threads = 1

    # Is threadPool shared between other client instances or classes.
    # If threadPool is not shared threadPool will be shutdown when the client instance is closed.
    # If threadPool is shared, threadPool will not be shutdown when the client instance is closed
    # (should be shutdown manually before the program terminates).
    shared-thread-pool = false

  }

  query-policy {

    # Transaction timeout in milliseconds.
    # This timeout is used to set the socket timeout and is also sent to the
    # server along with the transaction in the wire protocol.
    # Zero indicates no timeout.
    timeout = 0

    # Maximum number of retries before aborting the current transaction.
    # A retry is attempted when there is a network error other than timeout.
    # If maxRetries is exceeded, the abort will occur even if the timeout
    # has not yet been exceeded.
    max-retries = 2

    # Maximum number of concurrent requests to server nodes at any point in time.
    # If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then queries
    # will be made to 8 nodes in parallel.  When a query completes, a new query will
    # be issued until all 16 nodes have been queried.
    # Default (0) is to issue requests to all server nodes in parallel
    max-concurrent-nodes = 0

    # Number of records to place in queue before blocking.
    # Records received from multiple server nodes will be placed in a queue.
    # A separate thread consumes these records in parallel.
    # If the queue is full, the producer threads will block until records are consumed.
    record-queue-size = 5000

    # Milliseconds to sleep between retries if a transaction fails and the
    # tiemeout was not exceeded.
    # Zero to skip sleep.
    sleep-between-retries = 500

  }

  write-policy {

    # Transaction timeout in milliseconds.
    # This timeout is used to set the socket timeout and is also sent to the
    # server along with the transaction in the wire protocol.
    # Zero indicates no timeout.
    timeout = 0

    # Priority of request relative to other transactions.
    # Currently, only used for scans.
    #
    # DEFAULT  The server defines the priority.
    # LOW      Run the database operation in a background thread.
    # MEDIUM   Run the database operation at medium priority.
    # HIGH     Run the database operation at the highest priority.
    priority = "DEFAULT"

    # Record expiration. Also known as ttl (time to live).
    # Seconds record will live before being removed by the server.
    # Zero indicates that never expire
    expiration = 0

    # Expected generation. Generation is the number of times a record has been modified
    # (inluding creation) on the server. If a write operation is creating a recrod,
    # the expected generation would be 0.
    generation = 0

    # Qualify how to handle record writes based on record generation.
    #
    # NONE : indicates that the generation is not used to restrict writes.
    #
    # DUPLICATE : Create duplicate record if expected generation is not equal to
    #             server generation. Duplicates are only created when the server
    #             configuration option "allow-versions" is true (default is false).
    # EXPECT_GEN_GT : update/delete record if expected generation greater than
    #                 the server generation. Otherwise, fail. This is usefol
    #                 for restore after backup.
    # EXPECT_GEN_EQUAL : update/delete record if expected generation is equal
    #                    to server generation. Otherwise, fail.
    generation-policy = "NONE"

    # Qualify how to handle writes where the record already exists.
    #
    # UPDATE : Create or update record. Merge write command bins with existing bins.
    #
    # UPDATE_ONLY : Update record only. Fail if record does not exist. Merge write
    #               command bins with existing bins.
    #
    # REPLACE : Create or replace record. Delete existing bins not referenced by write
    #           command bins. Supported by Aerospike 3 server versions >= 3.1.6.
    #
    # REPLACE_ONLY : Replace record only. Fail if record does not exist. Delete existing
    #                bins not referenced by write command bins. Support by Aerospike 3
    #                server versions >= 3.1.6.
    #
    # CREATE_ONLY : Create only. Fail if record exists.
    record-exists-action = "UPDATE"

    # Maximum number of retries before aborting the current transaction.
    # A retry is attempted when there is a network error other than timeout.
    # If maxRetries is exceeded, the abort will occur even if the timeout
    # has not yet been exceeded.
    max-retries = 2

    # Milliseconds to sleep between retries if a transaction fails and the
    # tiemeout was not exceeded.
    # Zero to skip sleep.
    sleep-between-retries = 500

  }

}
